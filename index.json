[{"authors":null,"categories":null,"content":" I am a predoctoral researcher at the SCORE Lab, University of Seville, with an MSc in Advanced Computer Science from Newcastle Upon Tyne University, UK. My PhD research focuses on inter-parameter dependencies in web APIs, with a commitment to extending and enhancing the IDL Tool Suite. I apply these tools in various applications, including automated code generation and API gateways.\n   Download my CV .\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I am a predoctoral researcher at the SCORE Lab, University of Seville, with an MSc in Advanced Computer Science from Newcastle Upon Tyne University, UK. My PhD research focuses on inter-parameter dependencies in web APIs, with a commitment to extending and enhancing the IDL Tool Suite.","tags":null,"title":"Saman Barakat","type":"authors"},{"authors":null,"categories":null,"content":" IDLGen is an extension of the OpenAPI Generator designed to produce validation code for inter-parameter dependencies in Java and Python servers.\n","date":1733854690,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1733854690,"objectID":"ba46d714d9966068e9a49680dd7add71","permalink":"https://saman-barakat.github.io/project/idlgen/","publishdate":"2024-12-10T18:18:10.548Z","relpermalink":"/project/idlgen/","section":"project","summary":"IDLGen is an extension of the OpenAPI Generator designed to produce validation code for inter-parameter dependencies in Java and Python servers.","tags":null,"title":"IDLGen","type":"project"},{"authors":null,"categories":null,"content":" IDLFilter is a custom filter for Spring Cloud Gateway, specifically designed to manage inter-parameter dependencies in web APIs.\n","date":1733853128,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1733853128,"objectID":"a11675eb54e3d134f06d925636f972e1","permalink":"https://saman-barakat.github.io/project/idlfilter/","publishdate":"2024-12-10T17:52:08.23Z","relpermalink":"/project/idlfilter/","section":"project","summary":"IDLFilter is a custom filter for Spring Cloud Gateway, specifically designed to manage inter-parameter dependencies in web APIs.","tags":[],"title":"IDLFilter","type":"project"},{"authors":null,"categories":null,"content":" IDLPlayground is an online application developed to allow end users to explore the capabilities of IDL, IDL4OAS, and IDLReasoner web API.\n","date":1733853067,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1733853067,"objectID":"8611e17924c4639a570b05ba1909bcc7","permalink":"https://saman-barakat.github.io/project/idlplayground/","publishdate":"2024-12-10T17:51:07.583Z","relpermalink":"/project/idlplayground/","section":"project","summary":"IDLPlayground is an online application developed to allow end users to explore the capabilities of IDL, IDL4OAS, and IDLReasoner web API.","tags":[],"title":"IDLPlayground","type":"project"},{"authors":null,"categories":null,"content":" The IDLReasonerAPI is a web-based API designed to complement the IDLReasoner library.\n","date":1733852944,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1733852944,"objectID":"46ac936d65b5a2986af1ef133c552ca9","permalink":"https://saman-barakat.github.io/project/idlreasoner-api/","publishdate":"2024-12-10T17:49:04.889Z","relpermalink":"/project/idlreasoner-api/","section":"project","summary":"The IDLReasonerAPI is a web-based API designed to complement the IDLReasoner library.","tags":[],"title":"IDLReasoner API","type":"project"},{"authors":["Saman Barakat","Alberto Martin-Lopez","Carlos Müller","Sergio Segura","Antonio Ruiz-Cortés"],"categories":null,"content":"","date":1733840607,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1733840607,"objectID":"ab3bb0f76060b876ed288b4454228d5a","permalink":"https://saman-barakat.github.io/publication/the-idl-tool-suite-specifying-and-analyzing-inter-parameter-dependencies-in-web-apis/","publishdate":"2024-12-10T14:23:27.705Z","relpermalink":"/publication/the-idl-tool-suite-specifying-and-analyzing-inter-parameter-dependencies-in-web-apis/","section":"publication","summary":"Web APIs may include inter-parameter dependencies that limit how input parameters can be combined to call services correctly. These dependencies are extremely common, appearing in 4 out of every 5 APIs. This paper presents the IDL tool suite, a set of software tools for managing inter-parameter dependencies in web APIs. The suite includes a specification language (IDL), an OpenAPI Specification extension (IDL4OAS), an analysis engine (IDLReasoner), a web API, a playground, an AI chatbot, and a website. We also highlight several contributions by different groups of authors where the IDL tool suite has proven useful in the domains of automated testing, code generation, and API gateways. To date, the IDL tool suite has contributed to the detection of more than 200 bugs in industrial APIs, including GitHub, Spotify, and YouTube, among others. Also, IDL has been used to boost automated code generation, generating up to 10 times more code than state-of-the-art generators for web APIs.","tags":null,"title":"The IDL tool suite: Specifying and analyzing inter-parameter dependencies in web APIs","type":"publication"},{"authors":["Saman Barakat","Alberto Martin-Lopez","Carlos Müller","Sergio Segura"],"categories":null,"content":"","date":1702248151,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1702248151,"objectID":"f35180e3289037b2e99a04fa95efad24","permalink":"https://saman-barakat.github.io/publication/he-idl-tool-suite-inter-parameter-dependency-management-in-web-apis/","publishdate":"2023-12-10T22:42:31.38Z","relpermalink":"/publication/he-idl-tool-suite-inter-parameter-dependency-management-in-web-apis/","section":"publication","summary":"","tags":null,"title":"The IDL Tool Suite: Inter-Parameter Dependency Management in Web APIs","type":"publication"},{"authors":["Saman Barakat","Ana Belén Sánchez","Sergio Segura"],"categories":null,"content":"","date":1702247804,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1702247804,"objectID":"39148ca478cbc8153536984543caa530","permalink":"https://saman-barakat.github.io/publication/idlgen-automated-code-generation-for-inter-parameter-dependencies-in-web-apis/","publishdate":"2023-12-10T22:36:44.046Z","relpermalink":"/publication/idlgen-automated-code-generation-for-inter-parameter-dependencies-in-web-apis/","section":"publication","summary":"","tags":null,"title":"IDLGen: Automated Code Generation for Inter-parameter Dependencies in Web APIs","type":"publication"},{"authors":["Saman Barakat","Ana B. Sánchez","Sergio Segura"],"categories":null,"content":"","date":170223e4,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":170223e4,"objectID":"0dcc860e248b27599200459da9f900b8","permalink":"https://saman-barakat.github.io/publication/toward-dependency-aware-api-gateways/","publishdate":"2023-12-10T17:40:00Z","relpermalink":"/publication/toward-dependency-aware-api-gateways/","section":"publication","summary":"","tags":null,"title":"Toward Dependency-Aware API Gateways","type":"publication"},{"authors":null,"categories":null,"content":" The IDL website is dedicated to managing inter-parameter dependency projects.\n","date":1668461960,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1668461960,"objectID":"9d87f292abb3aa1970e890d181f0b250","permalink":"https://saman-barakat.github.io/project/idl-website/","publishdate":"2022-11-14T21:39:20.515Z","relpermalink":"/project/idl-website/","section":"project","summary":"The IDL website is dedicated to managing inter-parameter dependency projects.","tags":["IDLWebsite"],"title":"IDL Website","type":"project"},{"authors":null,"categories":null,"content":"A Java tool for the automated analysis of IDL specifications using constraint programming.\n","date":1668461711,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1668461711,"objectID":"3be9f34a57a174e447f89b72f4abdba2","permalink":"https://saman-barakat.github.io/project/idlreasoner/","publishdate":"2022-11-14T21:35:11.207Z","relpermalink":"/project/idlreasoner/","section":"project","summary":"A Java tool for the automated analysis of IDL specifications using constraint programming.","tags":[],"title":"IDLReasoner","type":"project"},{"authors":null,"categories":null,"content":"A textual domain-specific language for the specification of dependencies among input parameters in web APIs.\n","date":1668461435,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1668461435,"objectID":"fdff1c329bd8c6136bdbd60f853674bb","permalink":"https://saman-barakat.github.io/project/idl-inter-parameter-dependency-language/","publishdate":"2022-11-14T21:30:35.188Z","relpermalink":"/project/idl-inter-parameter-dependency-language/","section":"project","summary":"A textual domain-specific language for the specification of dependencies among input parameters in web APIs.","tags":["IDL"],"title":"IDL: Inter-parameter Dependency Language","type":"project"},{"authors":["Saman Barakat","Enrique Barba Roque","Ana Belen Sanchez","Sergio Segura"],"categories":["publications"],"content":"","date":1665852374,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1665852374,"objectID":"15e4ddb4c306f6645e49d2ab832eb7cf","permalink":"https://saman-barakat.github.io/publication/automated-code-generation-for-inter-parameter-dependencies-in-rest-apis/","publishdate":"2022-10-15T16:46:14.057Z","relpermalink":"/publication/automated-code-generation-for-inter-parameter-dependencies-in-rest-apis/","section":"publication","summary":"The generation of code templates from REST API specifications is a common practice in industry. However, existing tools neglects the dependencies among input parameters (so called inter-parameter dependencies), extremelly common in practice and usually described in natural language. As a result, developers are responsible for implementing the corresponding validation logic manually, a tedious and errorprone process. In this paper, we present an approach for the automated generation of code for inter-parameter dependencies specified using the IDL4OAS extension. As a proof of concept, we present an extension of the popular openapi-generator tool ecosystem, automating the generation of Java and Python code for the management of inter-parameter\ndependencies in both, servers and clients. Preliminary results show the effectiveness of the approach in accelerating the development of APIs while making them potentially more reliable.","tags":null,"title":"Automated Code Generation for Inter-parameter Dependencies in REST APIs","type":"publication"},{"authors":["Saman Barakat","Enrique Barba Roque","Ana Belén Sánchez","Sergio Segura"],"categories":null,"content":"","date":1653856920,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653856920,"objectID":"268d3dde703ad11bb7177d63a99b3bff","permalink":"https://saman-barakat.github.io/publication/specification-driven-code-generation-for-inter-parameter-dependencies-in-web-apis/","publishdate":"2022-05-29T20:42:00Z","relpermalink":"/publication/specification-driven-code-generation-for-inter-parameter-dependencies-in-web-apis/","section":"publication","summary":"The generation of code templates from web API specifications is a common practice in the software industry. However, existing tools neglect the dependencies among input parameters (so called inter-parameter dependencies), extremely common in practice and usually described in natural language. As a result, developers are responsible for implementing the corresponding validation logic manually, a tedious and error-prone process. In this paper, we present an approach for the automated generation of code for inter-parameter dependencies in web APIs. Specifically, we exploit the IDL4OAS extension for specifying inter-parameter dependencies as a part of OpenAPI Specification (OAS) files. To make our approach applicable in practice, we present an extension of the popular OpenAPI Generator tool ecosystem, automating the generation of Java and Python code for the management of inter-parameter dependencies in both servers and clients. Evaluation results show the effectiveness of the approach in accelerating the development of APIs, generating up to 9.4 times more code than current generators, while making APIs potentially more reliable.","tags":null,"title":"Specification-Driven Code Generation for Inter-parameter Dependencies in Web APIs","type":"publication"},{"authors":["Hassan B. Hassan","Saman A. Barakat","Qusay I. Sarhan"],"categories":null,"content":"","date":1634157527,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1634157527,"objectID":"9067a1b44ef3db4fcd1e8e7ac55230bd","permalink":"https://saman-barakat.github.io/publication/survey-on-serverless-computing/","publishdate":"2021-10-13T20:38:47.07Z","relpermalink":"/publication/survey-on-serverless-computing/","section":"publication","summary":"Serverless computing has gained importance over the last decade as an exciting new field, owing to its large influence in reducing costs, decreasing latency, improving scalability, and eliminating server-side management, to name a few. However, to date there is a lack of in-depth survey that would help developers and researchers better understand the significance of serverless computing in different contexts. Thus, it is essential to present research evidence that has been published in this area. In this systematic survey, 275 research papers that examined serverless computing from well-known literature databases were extensively reviewed to extract useful data. Then, the obtained data were analyzed to answer several research questions regarding state-of-the-art contributions of serverless computing, its concepts, its platforms, its usage, etc. We moreover discuss the challenges that serverless computing faces nowadays and how future research could enable its implementation and usage.","tags":null,"title":"Survey on serverless computing","type":"publication"},{"authors":["Sarhan S Dawood","SamanBarakat"],"categories":null,"content":"","date":1602673807,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602673807,"objectID":"d2c2f90605e97bbe5b17d9bbe7d88f8e","permalink":"https://saman-barakat.github.io/publication/empirical-performance-evaluation-of-knuth-morris-pratt-and-boyer-moore-string-matching-algorithms/","publishdate":"2020-10-14T11:10:07.094Z","relpermalink":"/publication/empirical-performance-evaluation-of-knuth-morris-pratt-and-boyer-moore-string-matching-algorithms/","section":"publication","summary":"Many algorithms have been proposed for string matching in order to find a specific pattern in a given text. These algorithms have been used in many applications such as software editors, genetics, Internet search engines, natural language processing, etc. The aim of this paper is to evaluate the performance of two popular algorithms: Boyer Moore (BM) and Knuth Morris Pratt (KMP) in terms of execution time. The algorithms have been programmed using Java and Java Microbenchmark Harness to evaluate their execution time using a number of experimental test scenarios. Results show that the BM algorithm outperformed the KMP algorithm in all test scenarios.","tags":null,"title":"Empirical Performance Evaluation of Knuth Morris Pratt and Boyer Moore String Matching Algorithms","type":"publication"},{"authors":["Saman A Barakat","Qusay I Sarhan"],"categories":null,"content":"","date":1539621806,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1539621806,"objectID":"c270e3949a84d086189a9c995ef8a1bf","permalink":"https://saman-barakat.github.io/publication/performance-evaluation-of-list-iteration-methods-in-java-an-empirical-study/","publishdate":"2018-10-15T16:43:26.12Z","relpermalink":"/publication/performance-evaluation-of-list-iteration-methods-in-java-an-empirical-study/","section":"publication","summary":"Introduction: Lists are used in various software applications including web applications, desktop applications, and Internet of Things (IoT) applications to store different types of items (e.g. country name, product model, and device category). Users can select one or more of these items to perform specific tasks such as filling forms, ordering products, reading device data, etc. In some software applications, lists store a huge number of items to be iterated over in order to know what users have selected. From a software development perspective, there are a number of methods to iterate over list items. Materials and Methods: In this paper, five list iteration methods: Classic For, Enhanced For, Iterator, List Iterator, and For Each have been compared experimentally with each other with regard to their performance (execution time required to iterate over list items). Thus, a number of experimental test scenarios have been conducted to obtain the comparison results. Results and Discussion: The experimental results of this study have been presented in Table 4. Conclusions: Overall performance evaluation showed that Iterator and List Iterator methods outperformed other list iteration methods in all test scenarios. However, List Iterator outperformed Iterator when the list size was small. On the other hand, Iterator outperformed List Iterator when the list size was large.","tags":null,"title":"Performance evaluation of list iteration methods in Java: an empirical study","type":"publication"},{"authors":["Saman Barakat"],"categories":["publications"],"content":"","date":1494759912,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1494759912,"objectID":"b35e3680c37cd4b9608a20057ed96a9b","permalink":"https://saman-barakat.github.io/publication/monitoring-and-analysis-of-microservices-performance/","publishdate":"2017-05-14T11:05:12.062Z","relpermalink":"/publication/monitoring-and-analysis-of-microservices-performance/","section":"publication","summary":"Monolithic applications have some drawbacks and issues. In particular, when new features are added to the monolithic applications the code bases become bigger. With Microservices such issues can be avoided. Microservices are software architecture that consists of small, distributed services that work together. It has many advantages such as simplicity, independent service scalability, using different technologies and simplicity in deployment, but requires knowledge in distributed systems. In this research, an existing microservice-based application has been monitored and analyzed. The Kieker framework has been used for monitoring the application performance and the Kieker trace analysis tools have been used to analyze the application","tags":["journal"],"title":"Monitoring and Analysis of Microservices Performance","type":"publication"},{"authors":["Saman Barakat"],"categories":null,"content":"","date":1381855188,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1381855188,"objectID":"71ac5599aab7d52a53dc9cfef9db0f02","permalink":"https://saman-barakat.github.io/publication/design-and-implementation-of-restful-non-repudiation-services/","publishdate":"2013-10-15T16:39:48.881Z","relpermalink":"/publication/design-and-implementation-of-restful-non-repudiation-services/","section":"publication","summary":"Security issues can be a barrier to make successful online businesses because the Internet can make critical information vulnerable. Non-repudiation is a security feature that is related to integrity and authenticity. Providing non-repudiation for online communication is a key factor to achieve a successful electronic business. Non-repudiation should ensure that each involvement in an online interaction cannot be denied. Besides, non-repudiation, fairness between the parties also plays an important\nrole to achieve successful electronic businesses. One solution used to achieve fair non-repudiation services is by using a trusted third party (TTP) that implements fair non-repudiation protocols. This project uses work that has been done by Cook et al in 2006 as a starting point, which was a non-repudiation service project that uses SOAP web service technology. However, this project aims to implement non-repudiation services using Representational State Transfer (REST) architecture style principles in order to obtain significant advantages that REST technology provides such as scalability and simplicity. ","tags":null,"title":"Design and Implementation of RESTful Non-repudiation Services","type":"publication"}]